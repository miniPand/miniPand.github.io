(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{510:function(e,t,r){"use strict";r.r(t);var a=r(8),_=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h2",{attrs:{id:"zookeeper实现分布式事务锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#zookeeper实现分布式事务锁"}},[e._v("#")]),e._v(" Zookeeper实现分布式事务锁")]),e._v(" "),r("h3",{attrs:{id:"_1-获取锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-获取锁"}},[e._v("#")]),e._v(" 1. 获取锁")]),e._v(" "),r("p",[e._v("1.1 在Zookeeper中创建一个父节点 LOCKS")]),e._v(" "),r("p",[e._v("1.2 在父节点LOCKS下创建一个临时顺序节点,此处顺序是由Zookeeper帮我们进行维护")]),e._v(" "),r("p",[e._v("1.3 获取ZK中LOCKS节点下所有节点,并判断自己是否为最小节点")]),e._v(" "),r("p",[e._v("1.4 如果为最小则获得锁 否则向排序仅在它前面一个的节点注册一个watcher用于监听节点是否存在")]),e._v(" "),r("p",[e._v("1.5 如果节点被删除则意味着锁释放 ZOOKEEPER将会给事件传播给客户端 客户端收到 事件将继续从1.2开始往下执行")]),e._v(" "),r("h3",{attrs:{id:"_2-释放锁"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-释放锁"}},[e._v("#")]),e._v(" 2. 释放锁")]),e._v(" "),r("p",[e._v("释放锁会出现两种情况")]),e._v(" "),r("p",[e._v("1.程序执行完主动调用delete删除临时节点")]),e._v(" "),r("p",[e._v("2.程序出现异常服务挂了,会断开与zookeeper服务端的链接,因为是临时节点所以节点自动删除")])])}),[],!1,null,null,null);t.default=_.exports}}]);